name: AWS SAM deploy to STG for modifing python source codes.
on:
  pull_request:
    branches:
      - stage
    types: [closed]
    paths:
      - '**app.py'
      - '!create-address-label-printing-data-lambda/**'
      - '!**.md' 

env:
  TARGET_BRANCH: stage
jobs:
  lambda-deploy:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true # マージの時だけ実行されるように変更
    env:
      REPO: https://${{github.actor}}:${{secrets.GITHUB_TOKEN}}@github.com/${{github.repository}}.git
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
        # ここはOK
      - name: 'Fetch'
        run: git fetch --depth 1 origin ${TARGET_BRANCH}
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: '3.6'
        # ここはOK
      - name: Install dependencies
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python -m pip install --upgrade pip
          pip install awscli
          pip install aws-sam-cli
          pip install pytest
        # ここはOK
      # - name: Configure AWS credentials for stg
      #   uses: aws-actions/configure-aws-credentials@v1
      #   with:
      #     aws-access-key-id: ${{ secrets.STG_AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.STG_AWS_SECRET_ACCESS_KEY }}
      #     aws-region: ${{ secrets.AWS_REGION}}
      #   # ここはOK
      - name: SAM Validate
        if: contains(github.event_name, 'pull_request')
        run: |
          CURRENT_DIR=`pwd`
          for FILE in $(git diff origin/${TARGET_BRANCH} HEAD --diff-filter=AM --name-only -- "*.py") ; do
            cd $(dirname ${FILE}); cd ../
            RES=`\find . -name "*.yaml" -maxdepth 1 2> /dev/null`
            if [ -n "$RES" ]; then
              sam validate
              cd $CURRENT_DIR
            elif [ -z "$RES" ]; then
              echo "template.yml nothing"
              cd $CURRENT_DIR
            fi
          done
      # - name: Unit Test
      #   if: contains(github.event_name, 'pull_request')
      #   run: |
      #     for FILE in $(git diff origin/${TARGET_BRANCH} HEAD --diff-filter=AM --name-only -- "*.py") ; do
      #       cd $(dirname ${FILE}); cd ../
      #       python -m pytest tests/unit/ -v
      #       cd ../
      #     done
      # TODO: この先未確認
      # - name: Lambda Event Invoke Test
      #   if: contains(github.event_name, 'pull_request')
      #   run: |
      #     for FILE in $(git diff origin/${TARGET_BRANCH} HEAD --diff-filter=AM --name-only -- "*.py") ; do
      #       cd $(dirname ${FILE}); cd ../
      #       sam build
      #       sam local invoke Function --event events.json 
      #       cd ../
      #     done
      # - name: Package
      #   if: contains(github.event_name, 'pull_request')
      #   env:
      #     TZ: 'Asia/Tokyo'
      #   run: |
      #     # Set variables
      #     DATE=`date +"%Y%m%d"`
      #     # cloudformation package
      #     CURRENT_DIR=`pwd`
      #     for FILE in $(git diff origin/${TARGET_BRANCH} HEAD --diff-filter=AM --name-only -- "*app.py") ; do
      #       cd $(dirname ${FILE}); cd ../
      #       RES=`\find . -name "*.yaml" -maxdepth 1 2> /dev/null`
      #       if [ -n "$RES" ]; then
      #         STACK_NAME=`pwd | awk -F "/" '{ print $NF }'`
      #         aws cloudformation package --template-file template.yaml --output-template-file ${DATE}-${STACK_NAME}.yaml --s3-bucket ${{ secrets.STG_AWS_SAM_BUCKET }} --region ${{ secrets.AWS_REGION}}
      #         aws s3 cp ${DATE}-${STACK_NAME}.yaml s3://${{ secrets.STG_AWS_SAM_BUCKET }}
      #         cd $CURRENT_DIR
      #       elif [ -z "$RES" ]; then
      #         echo "template.yml nothing"
      #         cd $CURRENT_DIR
      #       fi
      #     done

      # - name: Deploy
      #   if: contains(github.event_name, 'push')
      #   env:
      #     TZ: 'Asia/Tokyo'
      #   run: |
      #     # Set variables
      #     DATE=`date +"%Y%m%d"`
      #     # cloudformation deploy
      #     aws s3 cp s3://${{ secrets.STG_AWS_SAM_BUCKET }} . --recursive --exclude '*' --include "${DATE}*.yaml"
      #     for FILE in `\find . -name "${DATE}*.yaml"` ; do
      #       STACK_NAME=`echo ${FILE} | cut -c12- | sed 's/\.[^\.]*$//'`
      #       aws cloudformation deploy --template-file ${FILE} --stack-name ${STACK_NAME} --s3-bucket ${{ secrets.STG_AWS_SAM_BUCKET }} --region ${{ secrets.AWS_REGION}} --capabilities CAPABILITY_IAM --notification-arns ${{ secrets.STG_AWS_SNS_TOPIC }}
      #     done
      #     aws s3 rm s3://${{ secrets.STG_AWS_SAM_BUCKET }} --recursive --exclude '*' --include "${DATE}*.yaml"
      
